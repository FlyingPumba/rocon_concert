#!/usr/bin/env python
#       
# License: BSD
#   https://raw.github.com/robotics-in-concert/rocon_multimaster/master/rocon_gateway/LICENSE 
#

##############################################################################
# Imports
##############################################################################

import sys
import argparse
import rospy
import concert_roles
import rocon_utilities.console as console
import concert_msgs.msg as concert_msgs
import concert_msgs.srv as concert_srvs
import rocon_std_msgs.msg as rocon_std_msgs

##############################################################################
# Functions
##############################################################################
    
def parse_arguments():
    parser = argparse.ArgumentParser(description='Prettifies concert roles and apps information.')
    args = parser.parse_args()
    return args


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    
    rospy.init_node('roles_and_apps')
    args = parse_arguments()
    get_roles_and_apps = rospy.ServiceProxy(concert_msgs.Strings.GET_ROLES_AND_APPS, concert_srvs.GetRolesAndApps)
    request = concert_srvs.GetRolesAndAppsRequest()
    request.roles = []
    request.platform_info = rocon_std_msgs.PlatformInfo(
                            os='*',
                            version='*',
                            system='*',
                            platform='*'
                            )
    response = get_roles_and_apps(request)
    for d in response.data:
        console.pretty_println("%s" % d.role, console.bold)
        for remocon_app in d.remocon_apps:
            console.pretty_println("  %s" % remocon_app.display_name, console.green)
            print(console.cyan + "    Name" + console.reset + "         : " + console.yellow + "%s" % remocon_app.name + console.reset)
            print(console.cyan + "    Description" + console.reset + "  : " + console.yellow + "%s" % remocon_app.description + console.reset)
            print(console.cyan + "    Platform Info" + console.reset + ": " + console.yellow + "%s.%s.%s.%s" % (remocon_app.platform_info.os, remocon_app.platform_info.version, remocon_app.platform_info.platform, remocon_app.platform_info.system) + console.reset)
            print(console.cyan + "    Service" + console.reset + "      : " + console.yellow + "%s" % remocon_app.service_name + console.reset)
            if remocon_app.max == -1:
                print(console.cyan + "    Max" + console.reset + "          : " + console.yellow + "infinity" + console.reset)
            else:
                print(console.cyan + "    Max" + console.reset + "          : " + console.yellow + "%s" % remocon_app.max + console.reset)
            for remapping in remocon_app.remappings:
                print(console.cyan + "    Remapping" + console.reset + "    : " + console.yellow + "%s->%s" % (remapping.remap_from, remapping.remap_to) + console.reset)
            print(console.cyan + "    Parameters" +  console.reset + "   : " + console.yellow + "%s" % remocon_app.parameters + console.reset)
            print(console.cyan + "    Hash" + console.reset + "         : " + console.yellow + "%s" % remocon_app.hash + console.reset)
