#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/robotics-in-concert/rocon_concert/license/LICENSE
#

##############################################################################
# Imports
##############################################################################

import uuid
import sys
import argparse
import rospy
import rocon_console.console as console
import concert_msgs.msg as concert_msgs
import rocon_std_msgs.msg as rocon_std_msgs

##############################################################################
# Globals
##############################################################################

# random 16 byte string, alternatively uuid.getnode() returns a hash based on
# the mac address, uuid.uid1() based on localhost and time
key = uuid.uuid4()
remocon_name = 'dude'
topic_name = '/remocons/' + remocon_name + '_' + key.hex

##############################################################################
# Functions
##############################################################################
    
def parse_arguments():
    parser = argparse.ArgumentParser(description='Attach a fake remocon.')
    myargs = rospy.myargv(argv=sys.argv)
    args = parser.parse_args(args=myargs[1:])
    return args

def remocon_platform_info():
    platform_tuple = rocon_std_msgs.PlatformTuple(
                        os=rocon_std_msgs.PlatformTuple.OS_ANDROID,
                        version=rocon_std_msgs.PlatformTuple.VERSION_ANDROID_JELLYBEAN,
                        platform=rocon_std_msgs.PlatformTuple.PLATFORM_SMART_DEVICE,
                        system=rocon_std_msgs.PlatformTuple.SYSTEM_ROSJAVA,
                        name=remocon_name,  # Not relevant to this list
                    )
    platform_info = rocon_std_msgs.PlatformInfo(
                        tuple=platform_tuple,
                        icon=rocon_std_msgs.Icon()
                    )
    return platform_info


##############################################################################
# Main
##############################################################################

if __name__ == '__main__':
    
    rospy.init_node('attach_test_remocon')
    args = parse_arguments()
    publisher = rospy.Publisher(topic_name, concert_msgs.RemoconStatus, latch=True)
    status = concert_msgs.RemoconStatus()
    status.platform_info = remocon_platform_info()
    status.running_app = False
    status.uuid = key.hex
    publisher.publish(status)
    rospy.spin()
